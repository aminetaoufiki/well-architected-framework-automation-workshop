---
AWSTemplateFormatVersion: "2010-09-09"

Description: "App stack for Well-Architected automation workshop"

Mappings:
  RegionMap:
    eu-north-1:
      ami: ami-0bb935e4614c12d86
    ap-south-1:
      ami: ami-0e742cca61fb65051
    eu-west-3:
      ami: ami-00575c0cbc20caf50
    eu-west-2:
      ami: ami-09ee0944866c73f62
    eu-west-1:
      ami: ami-06e0ce9d3339cb039
    ap-northeast-3:
      ami: ami-090ae0a4750988734
    ap-northeast-2:
      ami: ami-0f6e451b865011317
    ap-northeast-1:
      ami: ami-0ffac3e16de16665e
    sa-east-1:
      ami: ami-01fc9174dd9330556
    ca-central-1:
      ami: ami-099effcf516c942b7
    ap-southeast-1:
      ami: ami-0f2eac25772cd4e36
    ap-southeast-2:
      ami: ami-0692dea0a2f8a1b35
    eu-central-1:
      ami: ami-0c0d3776ef525d5dd
    us-east-1:
      ami: ami-0dfcb1ef8550277af
    us-east-2:
      ami: ami-0cc87e5027adcdca8
    us-west-1:
      ami: ami-00569e54da628d17c
    us-west-2:
      ami: ami-0f1a5f5ada0e7da53

######################################
#           VPC & Networking
######################################

Resources:
  EC2VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: "10.69.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: "default"
      Tags: 
        - Key: "Name"
          Value: "workload-vpc"
  
  EC2Subnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}a"
      CidrBlock: "10.69.10.0/24"
      VpcId: !Ref EC2VPC
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: "Name"
          Value: "Public-10.69.10.0/24"

  EC2Subnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}b"
      CidrBlock: "10.69.11.0/24"
      VpcId: !Ref EC2VPC
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: "Name"
          Value: "Public-10.69.11.0/24"

  EC2InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags: 
        - Key: "Name"
          Value: "workload-igw"

  EC2RouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref EC2VPC
      Tags: 
        - Key: "Name"
          Value: "workload-public-rt"

  EC2VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref EC2InternetGateway
      VpcId: !Ref EC2VPC

  EC2SubnetRouteTableAssociation1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref EC2RouteTable
      SubnetId: !Ref EC2Subnet1

  EC2SubnetRouteTableAssociation2:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref EC2RouteTable
      SubnetId: !Ref EC2Subnet2

  EC2Route:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref EC2InternetGateway
      RouteTableId: !Ref EC2RouteTable

  EC2SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "workload-autoScaling-sg"
      GroupName: "workload-autoscaling-sg"
      VpcId: !Ref EC2VPC
      SecurityGroupIngress: 
        - CidrIp: "0.0.0.0/0"
          FromPort: 80
          IpProtocol: "tcp"
          ToPort: 80
      SecurityGroupEgress: 
        - CidrIp: "0.0.0.0/0"
          IpProtocol: "-1"

############## ALB ######################

  ElasticLoadBalancingV2LoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Name: "workload-alb"
      Scheme: "internet-facing"
      Type: "application"
      Subnets: 
        - !Ref EC2Subnet1
        - !Ref EC2Subnet2
      SecurityGroups: 
        - !Ref EC2SecurityGroup
      IpAddressType: "ipv4"
      LoadBalancerAttributes: 
        - Key: "access_logs.s3.enabled"
          Value: "false"
        - Key: "idle_timeout.timeout_seconds"
          Value: "60"
        - Key: "deletion_protection.enabled"
          Value: "false"
        - Key: "routing.http2.enabled"
          Value: "true"
        - Key: "routing.http.drop_invalid_header_fields.enabled"
          Value: "false"
        - Key: "routing.http.xff_client_port.enabled"
          Value: "false"
        - Key: "routing.http.preserve_host_header.enabled"
          Value: "false"
        - Key: "routing.http.xff_header_processing.mode"
          Value: "append"
        - Key: "load_balancing.cross_zone.enabled"
          Value: "true"
        - Key: "routing.http.desync_mitigation_mode"
          Value: "defensive"
        - Key: "waf.fail_open.enabled"
          Value: "false"
        - Key: "routing.http.x_amzn_tls_version_and_cipher_suite.enabled"
          Value: "false"

  ElasticLoadBalancingV2Listener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      LoadBalancerArn: !Ref ElasticLoadBalancingV2LoadBalancer
      Port: 80
      Protocol: "HTTP"
      DefaultActions: 
        - TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup
          Type: "forward"

  ElasticLoadBalancingV2TargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: "/"
      Port: 80
      Protocol: "HTTP"
      HealthCheckPort: "80"
      HealthCheckProtocol: "HTTP"
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      TargetType: "instance"
      Matcher: 
          HttpCode: "200-499"
      HealthyThresholdCount: 3
      VpcId: !Ref EC2VPC
      Name: "workload-tg"
      HealthCheckEnabled: true
      TargetGroupAttributes: 
        - Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.count"
          Value: "1"
        - Key: "stickiness.enabled"
          Value: "false"
        - Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.percentage"
          Value: "off"
        - Key: "deregistration_delay.timeout_seconds"
          Value: "5"
        - Key: "target_group_health.dns_failover.minimum_healthy_targets.count"
          Value: "1"
        - Key: "stickiness.app_cookie.cookie_name"
          Value: ""
        - Key: "stickiness.type"
          Value: "lb_cookie"
        - Key: "stickiness.lb_cookie.duration_seconds"
          Value: "86400"
        - Key: "slow_start.duration_seconds"
          Value: "0"
        - Key: "stickiness.app_cookie.duration_seconds"
          Value: "86400"
        - Key: "target_group_health.dns_failover.minimum_healthy_targets.percentage"
          Value: "off"
        - Key: "load_balancing.cross_zone.enabled"
          Value: "use_load_balancer_configuration"
        - Key: "load_balancing.algorithm.type"
          Value: "round_robin"
      Targets:
        - Id: !Ref EC2Instance
          Port: 80

############################ EC2 Instance ##################

  EC2Instance:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - ami
      InstanceType: "t2.micro"
      AvailabilityZone: !Sub "${AWS::Region}b"
      Tenancy: "default"
      SubnetId: !Ref EC2Subnet2
      EbsOptimized: false
      SecurityGroupIds: 
        - !Ref WebEC2SecurityGroup
      BlockDeviceMappings: 
        - DeviceName: "/dev/xvda"
          Ebs: 
              Encrypted: false
              VolumeSize: 8
              VolumeType: "gp2"
              DeleteOnTermination: true
      UserData: "IyEvYmluL2Jhc2gKc3VkbyB5dW0gdXBkYXRlIC15CnN1ZG8gYW1hem9uLWxpbnV4LWV4dHJhcyBpbnN0YWxsIC15IGxhbXAtbWFyaWFkYjEwLjItcGhwNy4yIHBocDcuMgpzdWRvIHl1bSBpbnN0YWxsIC15IGh0dHBkIG1hcmlhZGItc2VydmVyCnN1ZG8gc3lzdGVtY3RsIHN0YXJ0IGh0dHBkCnN1ZG8gc3lzdGVtY3RsIGVuYWJsZSBodHRwZApzdWRvIHVzZXJtb2QgLWEgLUcgYXBhY2hlIGVjMi11c2VyCnN1ZG8gY2hvd24gLVIgZWMyLXVzZXI6YXBhY2hlIC92YXIvd3d3CnN1ZG8gY2htb2QgMjc3NSAvdmFyL3d3dwpzdWRvIGZpbmQgL3Zhci93d3cgLXR5cGUgZCAtZXhlYyBjaG1vZCAyNzc1IHt9IFw7CnN1ZG8gZmluZCAvdmFyL3d3dyAtdHlwZSBmIC1leGVjIGNobW9kIDA2NjQge30gXDsKc3VkbyBlY2hvICI8P3BocCBwaHBpbmZvKCk7ID8+IiA+IC92YXIvd3d3L2h0bWwvcGhwaW5mby5waHAKZXhwb3J0IHVzZXJuYW1lPSJ1c3IiCmV4cG9ydCBwYXNzd29yZD0ibXlwYXNzd29yZDEyMyI="
      Tags: 
        - Key: "Name"
          Value: "workload-webserver"

  WebEC2SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "web--sg"
      GroupName: "web-sg"
      VpcId: !Ref EC2VPC
      SecurityGroupIngress: 
        - CidrIp: "0.0.0.0/0"
          FromPort: 80
          IpProtocol: "tcp"
          ToPort: 80
      SecurityGroupEgress: 
        - CidrIp: "0.0.0.0/0"
          IpProtocol: "-1"

########################### Lambda Function #######################

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import os
          def lambda_handler(event, context):
            password = os.environ['Password']
            print(f"The value of the 'password' environment variable is: {password}")
            return {
                'statusCode': 200,
                'body': 'Environment variable read successfully!'
            }
      Runtime: python3.9
      Handler: index.lambda_handler
      Environment: 
        Variables: 
          Username: "nasta"
          Password: "nasta@2221"
      FunctionName: "workload-lambda"
      Role: !GetAtt LambdaExecutionRole.Arn

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: WorkloadLambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole